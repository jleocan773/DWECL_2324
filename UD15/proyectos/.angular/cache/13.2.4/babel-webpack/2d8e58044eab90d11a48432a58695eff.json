{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\xampp\\\\htdocs\\\\DWECL-Tema15\\\\proyecto\\\\aplicacion\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nconst ANALYTICS_TYPE = 'analytics'; // Key to attach FID to in gtag params.\n\nconst GA_FID_KEY = 'firebase_id';\nconst ORIGIN_KEY = 'origin';\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst ERRORS = {\n  [\"already-exists\"\n  /* AnalyticsError.ALREADY_EXISTS */\n  ]: 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.',\n  [\"already-initialized\"\n  /* AnalyticsError.ALREADY_INITIALIZED */\n  ]: 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.',\n  [\"already-initialized-settings\"\n  /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */\n  ]: 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.',\n  [\"interop-component-reg-failed\"\n  /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */\n  ]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [\"invalid-analytics-context\"\n  /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */\n  ]: 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"indexeddb-unavailable\"\n  /* AnalyticsError.INDEXEDDB_UNAVAILABLE */\n  ]: 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [\"fetch-throttle\"\n  /* AnalyticsError.FETCH_THROTTLE */\n  ]: 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [\"config-fetch-failed\"\n  /* AnalyticsError.CONFIG_FETCH_FAILED */\n  ]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [\"no-api-key\"\n  /* AnalyticsError.NO_API_KEY */\n  ]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.',\n  [\"no-app-id\"\n  /* AnalyticsError.NO_APP_ID */\n  ]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.',\n  [\"no-client-id\"\n  /* AnalyticsError.NO_CLIENT_ID */\n  ]: 'The \"client_id\" field is empty.',\n  [\"invalid-gtag-resource\"\n  /* AnalyticsError.INVALID_GTAG_RESOURCE */\n  ]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\n\nfunction createGtagTrustedTypesScriptURL(url) {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(\"invalid-gtag-resource\"\n    /* AnalyticsError.INVALID_GTAG_RESOURCE */\n    , {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n\n  return url;\n}\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\n\n\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\n\n\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy;\n\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n  }\n\n  return trustedTypesPolicy;\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction insertScriptTag(dataLayerName, measurementId) {\n  const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n    createScriptURL: createGtagTrustedTypesScriptURL\n  });\n  const script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\n\n\nfunction gtagOnConfig(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _gtagOnConfig.apply(this, arguments);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\n\n\nfunction _gtagOnConfig() {\n  _gtagOnConfig = _asyncToGenerator(function* (gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\n    /// are waiting for, and wait only on that one.\n    const correspondingAppId = measurementIdToAppId[measurementId];\n\n    try {\n      if (correspondingAppId) {\n        yield initializationPromisesMap[correspondingAppId];\n      } else {\n        // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n        // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n        // that appId's initialization promise. If there is none, promise resolves and gtag\n        // call goes through.\n        const dynamicConfigResults = yield promiseAllSettled(dynamicConfigPromisesList);\n        const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\n\n        if (foundConfig) {\n          yield initializationPromisesMap[foundConfig.appId];\n        }\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n\n    gtagCore(\"config\"\n    /* GtagCommand.CONFIG */\n    , measurementId, gtagParams);\n  });\n  return _gtagOnConfig.apply(this, arguments);\n}\n\nfunction gtagOnEvent(_x7, _x8, _x9, _x10, _x11) {\n  return _gtagOnEvent.apply(this, arguments);\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\n\n\nfunction _gtagOnEvent() {\n  _gtagOnEvent = _asyncToGenerator(function* (gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n    try {\n      let initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n      // an initializeIds() promise we are waiting for.\n\n      if (gtagParams && gtagParams['send_to']) {\n        let gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        } // Checking 'send_to' fields requires having all measurement ID results back from\n        // the dynamic config fetch.\n\n\n        const dynamicConfigResults = yield promiseAllSettled(dynamicConfigPromisesList);\n\n        for (const sendToId of gaSendToList) {\n          // Any fetched dynamic measurement ID that matches this 'send_to' ID\n          const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\n          const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // Found an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array,\n            // exit the loop early, and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      } // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n\n\n      if (initializationPromisesToWaitFor.length === 0) {\n        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n      } // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n\n\n      yield Promise.all(initializationPromisesToWaitFor); // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n      gtagCore(\"event\"\n      /* GtagCommand.EVENT */\n      , measurementId, gtagParams || {});\n    } catch (e) {\n      logger.error(e);\n    }\n  });\n  return _gtagOnEvent.apply(this, arguments);\n}\n\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(_x12) {\n    return _gtagWrapper.apply(this, arguments);\n  }\n\n  function _gtagWrapper() {\n    _gtagWrapper = _asyncToGenerator(function* (command, ...args) {\n      try {\n        // If event, check that relevant initialization promises have completed.\n        if (command === \"event\"\n        /* GtagCommand.EVENT */\n        ) {\n          const [measurementId, gtagParams] = args; // If EVENT, second arg must be measurementId.\n\n          yield gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\n        } else if (command === \"config\"\n        /* GtagCommand.CONFIG */\n        ) {\n          const [measurementId, gtagParams] = args; // If CONFIG, second arg must be measurementId.\n\n          yield gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\n        } else if (command === \"consent\"\n        /* GtagCommand.CONSENT */\n        ) {\n          const [gtagParams] = args;\n          gtagCore(\"consent\"\n          /* GtagCommand.CONSENT */\n          , 'update', gtagParams);\n        } else if (command === \"get\"\n        /* GtagCommand.GET */\n        ) {\n          const [measurementId, fieldName, callback] = args;\n          gtagCore(\"get\"\n          /* GtagCommand.GET */\n          , measurementId, fieldName, callback);\n        } else if (command === \"set\"\n        /* GtagCommand.SET */\n        ) {\n          const [customParams] = args; // If SET, second arg must be params.\n\n          gtagCore(\"set\"\n          /* GtagCommand.SET */\n          , customParams);\n        } else {\n          gtagCore(command, ...args);\n        }\n      } catch (e) {\n        logger.error(e);\n      }\n    });\n    return _gtagWrapper.apply(this, arguments);\n  }\n\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\n\n\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  let gtagCore = function (..._args) {\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\n\n\nfunction findGtagScriptOnPage(dataLayerName) {\n  const scriptTags = window.document.getElementsByTagName('script');\n\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\n\n\nconst LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\n\nconst BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\n\nclass RetryData {\n  constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n\n  getThrottleMetadata(appId) {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId, metadata) {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId) {\n    delete this.throttleMetadata[appId];\n  }\n\n}\n\nconst defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\n\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction fetchDynamicConfig(_x13) {\n  return _fetchDynamicConfig.apply(this, arguments);\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\n\n\nfunction _fetchDynamicConfig() {\n  _fetchDynamicConfig = _asyncToGenerator(function* (appFields) {\n    var _a;\n\n    const {\n      appId,\n      apiKey\n    } = appFields;\n    const request = {\n      method: 'GET',\n      headers: getHeaders(apiKey)\n    };\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n    const response = yield fetch(appUrl, request);\n\n    if (response.status !== 200 && response.status !== 304) {\n      let errorMessage = '';\n\n      try {\n        // Try to get any error message text from server response.\n        const jsonResponse = yield response.json();\n\n        if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n          errorMessage = jsonResponse.error.message;\n        }\n      } catch (_ignored) {}\n\n      throw ERROR_FACTORY.create(\"config-fetch-failed\"\n      /* AnalyticsError.CONFIG_FETCH_FAILED */\n      , {\n        httpStatus: response.status,\n        responseMessage: errorMessage\n      });\n    }\n\n    return response.json();\n  });\n  return _fetchDynamicConfig.apply(this, arguments);\n}\n\nfunction fetchDynamicConfigWithRetry(_x14) {\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\n\n\nfunction _fetchDynamicConfigWithRetry() {\n  _fetchDynamicConfigWithRetry = _asyncToGenerator(function* (app, // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData = defaultRetryData, timeoutMillis) {\n    const {\n      appId,\n      apiKey,\n      measurementId\n    } = app.options;\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"no-app-id\"\n      /* AnalyticsError.NO_APP_ID */\n      );\n    }\n\n    if (!apiKey) {\n      if (measurementId) {\n        return {\n          measurementId,\n          appId\n        };\n      }\n\n      throw ERROR_FACTORY.create(\"no-api-key\"\n      /* AnalyticsError.NO_API_KEY */\n      );\n    }\n\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n    const signal = new AnalyticsAbortSignal();\n    setTimeout( /*#__PURE__*/_asyncToGenerator(function* () {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    }), timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n    return attemptFetchDynamicConfigWithRetry({\n      appId,\n      apiKey,\n      measurementId\n    }, throttleMetadata, signal, retryData);\n  });\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\n\nfunction attemptFetchDynamicConfigWithRetry(_x15, _x16, _x17) {\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction _attemptFetchDynamicConfigWithRetry() {\n  _attemptFetchDynamicConfigWithRetry = _asyncToGenerator(function* (appFields, {\n    throttleEndTimeMillis,\n    backoffCount\n  }, signal, retryData = defaultRetryData // for testing\n  ) {\n    var _a;\n\n    const {\n      appId,\n      measurementId\n    } = appFields; // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n\n    try {\n      yield setAbortableTimeout(signal, throttleEndTimeMillis);\n    } catch (e) {\n      if (measurementId) {\n        logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);\n        return {\n          appId,\n          measurementId\n        };\n      }\n\n      throw e;\n    }\n\n    try {\n      const response = yield fetchDynamicConfig(appFields); // Note the SDK only clears throttle state if response is success or non-retriable.\n\n      retryData.deleteThrottleMetadata(appId);\n      return response;\n    } catch (e) {\n      const error = e;\n\n      if (!isRetriableError(error)) {\n        retryData.deleteThrottleMetadata(appId);\n\n        if (measurementId) {\n          logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` + ` Falling back to the measurement ID ${measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\n          return {\n            appId,\n            measurementId\n          };\n        } else {\n          throw e;\n        }\n      }\n\n      const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis); // Increments backoff state.\n\n      const throttleMetadata = {\n        throttleEndTimeMillis: Date.now() + backoffMillis,\n        backoffCount: backoffCount + 1\n      }; // Persists state.\n\n      retryData.setThrottleMetadata(appId, throttleMetadata);\n      logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n      return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\n    }\n  });\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    const timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(() => {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* AnalyticsError.FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  const httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\n\nclass AnalyticsAbortSignal {\n  constructor() {\n    this.listeners = [];\n  }\n\n  addEventListener(listener) {\n    this.listeners.push(listener);\n  }\n\n  abort() {\n    this.listeners.forEach(listener => listener());\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\n\n\nlet defaultEventParametersForInit;\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\nfunction logEvent$1(_x18, _x19, _x20, _x21, _x22) {\n  return _logEvent$.apply(this, arguments);\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction _logEvent$() {\n  _logEvent$ = _asyncToGenerator(function* (gtagFunction, initializationPromise, eventName, eventParams, options) {\n    if (options && options.global) {\n      gtagFunction(\"event\"\n      /* GtagCommand.EVENT */\n      , eventName, eventParams);\n      return;\n    } else {\n      const measurementId = yield initializationPromise;\n      const params = Object.assign(Object.assign({}, eventParams), {\n        'send_to': measurementId\n      });\n      gtagFunction(\"event\"\n      /* GtagCommand.EVENT */\n      , eventName, params);\n    }\n  });\n  return _logEvent$.apply(this, arguments);\n}\n\nfunction setCurrentScreen$1(_x23, _x24, _x25, _x26) {\n  return _setCurrentScreen$.apply(this, arguments);\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction _setCurrentScreen$() {\n  _setCurrentScreen$ = _asyncToGenerator(function* (gtagFunction, initializationPromise, screenName, options) {\n    if (options && options.global) {\n      gtagFunction(\"set\"\n      /* GtagCommand.SET */\n      , {\n        'screen_name': screenName\n      });\n      return Promise.resolve();\n    } else {\n      const measurementId = yield initializationPromise;\n      gtagFunction(\"config\"\n      /* GtagCommand.CONFIG */\n      , measurementId, {\n        update: true,\n        'screen_name': screenName\n      });\n    }\n  });\n  return _setCurrentScreen$.apply(this, arguments);\n}\n\nfunction setUserId$1(_x27, _x28, _x29, _x30) {\n  return _setUserId$.apply(this, arguments);\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction _setUserId$() {\n  _setUserId$ = _asyncToGenerator(function* (gtagFunction, initializationPromise, id, options) {\n    if (options && options.global) {\n      gtagFunction(\"set\"\n      /* GtagCommand.SET */\n      , {\n        'user_id': id\n      });\n      return Promise.resolve();\n    } else {\n      const measurementId = yield initializationPromise;\n      gtagFunction(\"config\"\n      /* GtagCommand.CONFIG */\n      , measurementId, {\n        update: true,\n        'user_id': id\n      });\n    }\n  });\n  return _setUserId$.apply(this, arguments);\n}\n\nfunction setUserProperties$1(_x31, _x32, _x33, _x34) {\n  return _setUserProperties$.apply(this, arguments);\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\n\n\nfunction _setUserProperties$() {\n  _setUserProperties$ = _asyncToGenerator(function* (gtagFunction, initializationPromise, properties, options) {\n    if (options && options.global) {\n      const flatProperties = {};\n\n      for (const key of Object.keys(properties)) {\n        // use dot notation for merge behavior in gtag.js\n        flatProperties[`user_properties.${key}`] = properties[key];\n      }\n\n      gtagFunction(\"set\"\n      /* GtagCommand.SET */\n      , flatProperties);\n      return Promise.resolve();\n    } else {\n      const measurementId = yield initializationPromise;\n      gtagFunction(\"config\"\n      /* GtagCommand.CONFIG */\n      , measurementId, {\n        update: true,\n        'user_properties': properties\n      });\n    }\n  });\n  return _setUserProperties$.apply(this, arguments);\n}\n\nfunction internalGetGoogleAnalyticsClientId(_x35, _x36) {\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction _internalGetGoogleAnalyticsClientId() {\n  _internalGetGoogleAnalyticsClientId = _asyncToGenerator(function* (gtagFunction, initializationPromise) {\n    const measurementId = yield initializationPromise;\n    return new Promise((resolve, reject) => {\n      gtagFunction(\"get\"\n      /* GtagCommand.GET */\n      , measurementId, 'client_id', clientId => {\n        if (!clientId) {\n          reject(ERROR_FACTORY.create(\"no-client-id\"\n          /* AnalyticsError.NO_CLIENT_ID */\n          ));\n        }\n\n        resolve(clientId);\n      });\n    });\n  });\n  return _internalGetGoogleAnalyticsClientId.apply(this, arguments);\n}\n\nfunction setAnalyticsCollectionEnabled$1(_x37, _x38) {\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\n\n\nfunction _setAnalyticsCollectionEnabled$() {\n  _setAnalyticsCollectionEnabled$ = _asyncToGenerator(function* (initializationPromise, enabled) {\n    const measurementId = yield initializationPromise;\n    window[`ga-disable-${measurementId}`] = !enabled;\n  });\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\n\nlet defaultConsentSettingsForInit;\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\n\nfunction _setConsentDefaultForInit(consentSettings) {\n  defaultConsentSettingsForInit = consentSettings;\n}\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\n\n\nfunction _setDefaultEventParametersForInit(customParams) {\n  defaultEventParametersForInit = customParams;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction validateIndexedDB() {\n  return _validateIndexedDB.apply(this, arguments);\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\n\n\nfunction _validateIndexedDB() {\n  _validateIndexedDB = _asyncToGenerator(function* () {\n    if (!isIndexedDBAvailable()) {\n      logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n      /* AnalyticsError.INDEXEDDB_UNAVAILABLE */\n      , {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message);\n      return false;\n    } else {\n      try {\n        yield validateIndexedDBOpenable();\n      } catch (e) {\n        logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\"\n        /* AnalyticsError.INDEXEDDB_UNAVAILABLE */\n        , {\n          errorInfo: e === null || e === void 0 ? void 0 : e.toString()\n        }).message);\n        return false;\n      }\n    }\n\n    return true;\n  });\n  return _validateIndexedDB.apply(this, arguments);\n}\n\nfunction _initializeAnalytics(_x39, _x40, _x41, _x42, _x43, _x44, _x45) {\n  return _initializeAnalytics2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Analytics Service class.\r\n */\n\n\nfunction _initializeAnalytics2() {\n  _initializeAnalytics2 = _asyncToGenerator(function* (app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n    var _a;\n\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n\n    dynamicConfigPromise.then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n\n      if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n        logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` + ` does not match the measurement ID fetched from the server (${config.measurementId}).` + ` To ensure analytics events are always sent to the correct Analytics property,` + ` update the` + ` measurement ID field in the local config or remove it from the local config.`);\n      }\n    }).catch(e => logger.error(e)); // Add to list to track state of all dynamic config promises.\n\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\n    const fidPromise = validateIndexedDB().then(envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    });\n    const [dynamicConfig, fid] = yield Promise.all([dynamicConfigPromise, fidPromise]); // Detect if user has already put the gtag <script> tag on this page with the passed in\n    // data layer name.\n\n    if (!findGtagScriptOnPage(dataLayerName)) {\n      insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n    } // Detects if there are consent settings that need to be configured.\n\n\n    if (defaultConsentSettingsForInit) {\n      gtagCore(\"consent\"\n      /* GtagCommand.CONSENT */\n      , 'default', defaultConsentSettingsForInit);\n\n      _setConsentDefaultForInit(undefined);\n    } // This command initializes gtag.js and only needs to be called once for the entire web app,\n    // but since it is idempotent, we can call it multiple times.\n    // We keep it together with other initialization logic for better code structure.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    gtagCore('js', new Date()); // User config added first. We don't want users to accidentally overwrite\n    // base Firebase config properties.\n\n    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`\n\n    configProperties[ORIGIN_KEY] = 'firebase';\n    configProperties.update = true;\n\n    if (fid != null) {\n      configProperties[GA_FID_KEY] = fid;\n    } // It should be the first config command called on this GA-ID\n    // Initialize this GA-ID and set FID on it using the gtag config API.\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n    // `configProperties`.\n\n\n    gtagCore(\"config\"\n    /* GtagCommand.CONFIG */\n    , dynamicConfig.measurementId, configProperties); // Detects if there is data that will be set on every event logged from the SDK.\n\n    if (defaultEventParametersForInit) {\n      gtagCore(\"set\"\n      /* GtagCommand.SET */\n      , defaultEventParametersForInit);\n\n      _setDefaultEventParametersForInit(undefined);\n    }\n\n    return dynamicConfig.measurementId;\n  });\n  return _initializeAnalytics2.apply(this, arguments);\n}\n\nclass AnalyticsService {\n  constructor(app) {\n    this.app = app;\n  }\n\n  _delete() {\n    delete initializationPromisesMap[this.app.options.appId];\n    return Promise.resolve();\n  }\n\n}\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\n\n\nlet initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\n\nlet dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\n\nconst measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nlet dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nlet gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nlet gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nlet wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nlet globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* AnalyticsError.ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\n\n\nfunction warnOnBrowserContextMismatch() {\n  const mismatchedEnvMessages = [];\n\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages.map((message, index) => `(${index + 1}) ${message}`).join(' ');\n    const err = ERROR_FACTORY.create(\"invalid-analytics-context\"\n    /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */\n    , {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\n\n\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\"\n    /* AnalyticsError.NO_APP_ID */\n    );\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` + ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` + ` provided in the \"measurementId\" field in the local Firebase config.`);\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\"\n      /* AnalyticsError.NO_API_KEY */\n      );\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* AnalyticsError.ALREADY_EXISTS */\n    , {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    const {\n      wrappedGtag,\n      gtagCore\n    } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n\n\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  const analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\n\n\nfunction getAnalytics(app = getApp()) {\n  app = getModularInstance(app); // Dependencies\n\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\n\n\nfunction initializeAnalytics(app, options = {}) {\n  // Dependencies\n  const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* AnalyticsError.ALREADY_INITIALIZED */\n      );\n    }\n  }\n\n  const analyticsInstance = analyticsProvider.initialize({\n    options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\n\n\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\n\n\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator(function* () {\n    if (isBrowserExtension()) {\n      return false;\n    }\n\n    if (!areCookiesEnabled()) {\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      return false;\n    }\n\n    try {\n      const isDBOpenable = yield validateIndexedDBOpenable();\n      return isDBOpenable;\n    } catch (error) {\n      return false;\n    }\n  });\n  return _isSupported.apply(this, arguments);\n}\n\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\n}\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\n\n\nfunction getGoogleAnalyticsClientId(_x46) {\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\n\n\nfunction _getGoogleAnalyticsClientId() {\n  _getGoogleAnalyticsClientId = _asyncToGenerator(function* (analyticsInstance) {\n    analyticsInstance = getModularInstance(analyticsInstance);\n    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\n  });\n  return _getGoogleAnalyticsClientId.apply(this, arguments);\n}\n\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\n\n\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\n}\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\n\n\nfunction setDefaultEventParameters(customParams) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"set\"\n    /* GtagCommand.SET */\n    , customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\n\n\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\n}\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\n\n\nfunction setConsent(consentSettings) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"consent\"\n    /* GtagCommand.CONSENT */\n    , 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.0\";\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\n\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, (container, {\n    options: analyticsOptions\n  }) => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    const installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ));\n\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* ComponentType.PRIVATE */\n  ));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function internalFactory(container) {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics();\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };","map":{"version":3,"sources":["C:/xampp/htdocs/DWECL-Tema15/proyecto/aplicacion/node_modules/@firebase/analytics/dist/esm/index.esm2017.js"],"names":["_getProvider","getApp","_registerComponent","registerVersion","Logger","ErrorFactory","calculateBackoffMillis","FirebaseError","isIndexedDBAvailable","validateIndexedDBOpenable","isBrowserExtension","areCookiesEnabled","getModularInstance","deepEqual","Component","ANALYTICS_TYPE","GA_FID_KEY","ORIGIN_KEY","FETCH_TIMEOUT_MILLIS","DYNAMIC_CONFIG_URL","GTAG_URL","logger","ERRORS","ERROR_FACTORY","createGtagTrustedTypesScriptURL","url","startsWith","err","create","gtagURL","warn","message","promiseAllSettled","promises","Promise","all","map","promise","catch","e","createTrustedTypesPolicy","policyName","policyOptions","trustedTypesPolicy","window","trustedTypes","createPolicy","insertScriptTag","dataLayerName","measurementId","createScriptURL","script","document","createElement","gtagScriptURL","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","gtagParams","correspondingAppId","dynamicConfigResults","foundConfig","find","config","appId","error","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","sendToId","initializationPromise","push","length","Object","values","wrapGtag","gtagWrapper","command","args","fieldName","callback","customParams","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","LONG_RETRY_FACTOR","BASE_INTERVAL_MILLIS","RetryData","constructor","throttleMetadata","intervalMillis","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","defaultRetryData","getHeaders","apiKey","Headers","Accept","fetchDynamicConfig","appFields","_a","request","method","headers","appUrl","replace","response","fetch","status","errorMessage","jsonResponse","json","_ignored","httpStatus","responseMessage","fetchDynamicConfigWithRetry","app","retryData","timeoutMillis","options","backoffCount","throttleEndTimeMillis","Date","now","signal","AnalyticsAbortSignal","setTimeout","abort","undefined","attemptFetchDynamicConfigWithRetry","setAbortableTimeout","isRetriableError","backoffMillis","Number","customData","debug","resolve","reject","Math","max","timeout","addEventListener","clearTimeout","listeners","listener","forEach","defaultEventParametersForInit","logEvent$1","gtagFunction","eventName","eventParams","global","params","assign","setCurrentScreen$1","screenName","update","setUserId$1","id","setUserProperties$1","properties","flatProperties","key","keys","internalGetGoogleAnalyticsClientId","clientId","setAnalyticsCollectionEnabled$1","enabled","defaultConsentSettingsForInit","_setConsentDefaultForInit","consentSettings","_setDefaultEventParametersForInit","validateIndexedDB","errorInfo","toString","_initializeAnalytics","installations","dynamicConfigPromise","then","fidPromise","envIsValid","getId","dynamicConfig","fid","configProperties","AnalyticsService","_delete","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","settings","warnOnBrowserContextMismatch","mismatchedEnvMessages","details","index","join","factory","analyticsInstance","getAnalytics","analyticsProvider","isInitialized","getImmediate","initializeAnalytics","existingInstance","getOptions","initialize","isSupported","isDBOpenable","setCurrentScreen","getGoogleAnalyticsClientId","setUserId","setUserProperties","setAnalyticsCollectionEnabled","setDefaultEventParameters","logEvent","setConsent","name","version","registerAnalytics","container","analyticsOptions","getProvider","internalFactory","analytics","reason"],"mappings":"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","sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nconst ANALYTICS_TYPE = 'analytics';\r\n// Key to attach FID to in gtag params.\r\nconst GA_FID_KEY = 'firebase_id';\r\nconst ORIGIN_KEY = 'origin';\r\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    [\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +\r\n        'it was initially called with. It can be called again with the same options to ' +\r\n        'return the existing instance, or getAnalytics() can be used ' +\r\n        'to get a reference to the already-intialized instance.',\r\n    [\"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    [\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    [\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    [\"no-api-key\" /* AnalyticsError.NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    [\"no-app-id\" /* AnalyticsError.NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    [\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */]: 'The \"client_id\" field is empty.',\r\n    [\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\r\nfunction createGtagTrustedTypesScriptURL(url) {\r\n    if (!url.startsWith(GTAG_URL)) {\r\n        const err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\r\n            gtagURL: url\r\n        });\r\n        logger.warn(err.message);\r\n        return '';\r\n    }\r\n    return url;\r\n}\r\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\r\nfunction promiseAllSettled(promises) {\r\n    return Promise.all(promises.map(promise => promise.catch(e => e)));\r\n}\r\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\r\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\r\n    // Create a TrustedTypes policy that we can use for updating src\r\n    // properties\r\n    let trustedTypesPolicy;\r\n    if (window.trustedTypes) {\r\n        trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\r\n    }\r\n    return trustedTypesPolicy;\r\n}\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\r\n        createScriptURL: createGtagTrustedTypesScriptURL\r\n    });\r\n    const script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\r\n    script.src = trustedTypesPolicy\r\n        ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL)\r\n        : gtagScriptURL;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    let dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\r\n    /// are waiting for, and wait only on that one.\r\n    const correspondingAppId = measurementIdToAppId[measurementId];\r\n    try {\r\n        if (correspondingAppId) {\r\n            await initializationPromisesMap[correspondingAppId];\r\n        }\r\n        else {\r\n            // If config is not fetched yet, wait for all configs (we don't know which one we need) and\r\n            // find the appId (if any) corresponding to this measurementId. If there is one, wait on\r\n            // that appId's initialization promise. If there is none, promise resolves and gtag\r\n            // call goes through.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\r\n            if (foundConfig) {\r\n                await initializationPromisesMap[foundConfig.appId];\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    try {\r\n        let initializationPromisesToWaitFor = [];\r\n        // If there's a 'send_to' param, check if any ID specified matches\r\n        // an initializeIds() promise we are waiting for.\r\n        if (gtagParams && gtagParams['send_to']) {\r\n            let gaSendToList = gtagParams['send_to'];\r\n            // Make it an array if is isn't, so it can be dealt with the same way.\r\n            if (!Array.isArray(gaSendToList)) {\r\n                gaSendToList = [gaSendToList];\r\n            }\r\n            // Checking 'send_to' fields requires having all measurement ID results back from\r\n            // the dynamic config fetch.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            for (const sendToId of gaSendToList) {\r\n                // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\r\n                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                if (initializationPromise) {\r\n                    initializationPromisesToWaitFor.push(initializationPromise);\r\n                }\r\n                else {\r\n                    // Found an item in 'send_to' that is not associated\r\n                    // directly with an FID, possibly a group.  Empty this array,\r\n                    // exit the loop early, and let it get populated below.\r\n                    initializationPromisesToWaitFor = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // This will be unpopulated if there was no 'send_to' field , or\r\n        // if not all entries in the 'send_to' field could be mapped to\r\n        // a FID. In these cases, wait on all pending initialization promises.\r\n        if (initializationPromisesToWaitFor.length === 0) {\r\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n        }\r\n        // Run core gtag function with args after all relevant initialization\r\n        // promises have been resolved.\r\n        await Promise.all(initializationPromisesToWaitFor);\r\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n        gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    async function gtagWrapper(command, ...args) {\r\n        try {\r\n            // If event, check that relevant initialization promises have completed.\r\n            if (command === \"event\" /* GtagCommand.EVENT */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If EVENT, second arg must be measurementId.\r\n                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"config\" /* GtagCommand.CONFIG */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If CONFIG, second arg must be measurementId.\r\n                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"consent\" /* GtagCommand.CONSENT */) {\r\n                const [gtagParams] = args;\r\n                gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'update', gtagParams);\r\n            }\r\n            else if (command === \"get\" /* GtagCommand.GET */) {\r\n                const [measurementId, fieldName, callback] = args;\r\n                gtagCore(\"get\" /* GtagCommand.GET */, measurementId, fieldName, callback);\r\n            }\r\n            else if (command === \"set\" /* GtagCommand.SET */) {\r\n                const [customParams] = args;\r\n                // If SET, second arg must be params.\r\n                gtagCore(\"set\" /* GtagCommand.SET */, customParams);\r\n            }\r\n            else {\r\n                gtagCore(command, ...args);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.error(e);\r\n        }\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    let gtagCore = function (..._args) {\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\r\nfunction findGtagScriptOnPage(dataLayerName) {\r\n    const scriptTags = window.document.getElementsByTagName('script');\r\n    for (const tag of Object.values(scriptTags)) {\r\n        if (tag.src &&\r\n            tag.src.includes(GTAG_URL) &&\r\n            tag.src.includes(dataLayerName)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nconst LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nconst BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nclass RetryData {\r\n    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    getThrottleMetadata(appId) {\r\n        return this.throttleMetadata[appId];\r\n    }\r\n    setThrottleMetadata(appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    }\r\n    deleteThrottleMetadata(appId) {\r\n        delete this.throttleMetadata[appId];\r\n    }\r\n}\r\nconst defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    const { appId, apiKey } = appFields;\r\n    const request = {\r\n        method: 'GET',\r\n        headers: getHeaders(apiKey)\r\n    };\r\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n    const response = await fetch(appUrl, request);\r\n    if (response.status !== 200 && response.status !== 304) {\r\n        let errorMessage = '';\r\n        try {\r\n            // Try to get any error message text from server response.\r\n            const jsonResponse = (await response.json());\r\n            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                errorMessage = jsonResponse.error.message;\r\n            }\r\n        }\r\n        catch (_ignored) { }\r\n        throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\r\n            httpStatus: response.status,\r\n            responseMessage: errorMessage\r\n        });\r\n    }\r\n    return response.json();\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData = defaultRetryData, timeoutMillis) {\r\n    const { appId, apiKey, measurementId } = app.options;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!apiKey) {\r\n        if (measurementId) {\r\n            return {\r\n                measurementId,\r\n                appId\r\n            };\r\n        }\r\n        throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n    }\r\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n        backoffCount: 0,\r\n        throttleEndTimeMillis: Date.now()\r\n    };\r\n    const signal = new AnalyticsAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        signal.abort();\r\n    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nasync function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing\r\n) {\r\n    var _a;\r\n    const { appId, measurementId } = appFields;\r\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n    // Ensures the throttle end time is honored if the last attempt timed out.\r\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n    try {\r\n        await setAbortableTimeout(signal, throttleEndTimeMillis);\r\n    }\r\n    catch (e) {\r\n        if (measurementId) {\r\n            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +\r\n                ` Falling back to the measurement ID ${measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);\r\n            return { appId, measurementId };\r\n        }\r\n        throw e;\r\n    }\r\n    try {\r\n        const response = await fetchDynamicConfig(appFields);\r\n        // Note the SDK only clears throttle state if response is success or non-retriable.\r\n        retryData.deleteThrottleMetadata(appId);\r\n        return response;\r\n    }\r\n    catch (e) {\r\n        const error = e;\r\n        if (!isRetriableError(error)) {\r\n            retryData.deleteThrottleMetadata(appId);\r\n            if (measurementId) {\r\n                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +\r\n                    ` Falling back to the measurement ID ${measurementId}` +\r\n                    ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\r\n                return { appId, measurementId };\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503\r\n            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n        // Increments backoff state.\r\n        const throttleMetadata = {\r\n            throttleEndTimeMillis: Date.now() + backoffMillis,\r\n            backoffCount: backoffCount + 1\r\n        };\r\n        // Persists state.\r\n        retryData.setThrottleMetadata(appId, throttleMetadata);\r\n        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\r\n        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\r\n    }\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass AnalyticsAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\r\nlet defaultEventParametersForInit;\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\r\n        return;\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        const params = Object.assign(Object.assign({}, eventParams), { 'send_to': measurementId });\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\r\n    }\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'screen_name': screenName });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'screen_name': screenName\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'user_id': id });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_id': id\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\r\n    if (options && options.global) {\r\n        const flatProperties = {};\r\n        for (const key of Object.keys(properties)) {\r\n            // use dot notation for merge behavior in gtag.js\r\n            flatProperties[`user_properties.${key}`] = properties[key];\r\n        }\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_properties': properties\r\n        });\r\n    }\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\r\nasync function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {\r\n    const measurementId = await initializationPromise;\r\n    return new Promise((resolve, reject) => {\r\n        gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', (clientId) => {\r\n            if (!clientId) {\r\n                reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\r\n            }\r\n            resolve(clientId);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\r\n    const measurementId = await initializationPromise;\r\n    window[`ga-disable-${measurementId}`] = !enabled;\r\n}\r\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\r\nlet defaultConsentSettingsForInit;\r\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction _setConsentDefaultForInit(consentSettings) {\r\n    defaultConsentSettingsForInit = consentSettings;\r\n}\r\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\r\nfunction _setDefaultEventParametersForInit(customParams) {\r\n    defaultEventParametersForInit = customParams;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function validateIndexedDB() {\r\n    if (!isIndexedDBAvailable()) {\r\n        logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n            errorInfo: 'IndexedDB is not available in this environment.'\r\n        }).message);\r\n        return false;\r\n    }\r\n    else {\r\n        try {\r\n            await validateIndexedDBOpenable();\r\n        }\r\n        catch (e) {\r\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n                errorInfo: e === null || e === void 0 ? void 0 : e.toString()\r\n            }).message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\r\n    var _a;\r\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n    dynamicConfigPromise\r\n        .then(config => {\r\n        measurementIdToAppId[config.measurementId] = config.appId;\r\n        if (app.options.measurementId &&\r\n            config.measurementId !== app.options.measurementId) {\r\n            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +\r\n                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\r\n                ` To ensure analytics events are always sent to the correct Analytics property,` +\r\n                ` update the` +\r\n                ` measurement ID field in the local config or remove it from the local config.`);\r\n        }\r\n    })\r\n        .catch(e => logger.error(e));\r\n    // Add to list to track state of all dynamic config promises.\r\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n    const fidPromise = validateIndexedDB().then(envIsValid => {\r\n        if (envIsValid) {\r\n            return installations.getId();\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    });\r\n    const [dynamicConfig, fid] = await Promise.all([\r\n        dynamicConfigPromise,\r\n        fidPromise\r\n    ]);\r\n    // Detect if user has already put the gtag <script> tag on this page with the passed in\r\n    // data layer name.\r\n    if (!findGtagScriptOnPage(dataLayerName)) {\r\n        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n    }\r\n    // Detects if there are consent settings that need to be configured.\r\n    if (defaultConsentSettingsForInit) {\r\n        gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\r\n        _setConsentDefaultForInit(undefined);\r\n    }\r\n    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n    // but since it is idempotent, we can call it multiple times.\r\n    // We keep it together with other initialization logic for better code structure.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    gtagCore('js', new Date());\r\n    // User config added first. We don't want users to accidentally overwrite\r\n    // base Firebase config properties.\r\n    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\r\n    // guard against developers accidentally setting properties with prefix `firebase_`\r\n    configProperties[ORIGIN_KEY] = 'firebase';\r\n    configProperties.update = true;\r\n    if (fid != null) {\r\n        configProperties[GA_FID_KEY] = fid;\r\n    }\r\n    // It should be the first config command called on this GA-ID\r\n    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n    // `configProperties`.\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\r\n    // Detects if there is data that will be set on every event logged from the SDK.\r\n    if (defaultEventParametersForInit) {\r\n        gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\r\n        _setDefaultEventParametersForInit(undefined);\r\n    }\r\n    return dynamicConfig.measurementId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Analytics Service class.\r\n */\r\nclass AnalyticsService {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    _delete() {\r\n        delete initializationPromisesMap[this.app.options.appId];\r\n        return Promise.resolve();\r\n    }\r\n}\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nlet initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nlet dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nconst measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nlet dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nlet gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nlet gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nlet wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nlet globalInitDone = false;\r\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    const mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        const details = mismatchedEnvMessages\r\n            .map((message, index) => `(${index + 1}) ${message}`)\r\n            .join(' ');\r\n        const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\r\nfunction factory(app, installations, options) {\r\n    warnOnBrowserContextMismatch();\r\n    const appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\r\n                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config.`);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\r\n    const analyticsInstance = new AnalyticsService(app);\r\n    return analyticsInstance;\r\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction getAnalytics(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        return analyticsProvider.getImmediate();\r\n    }\r\n    return initializeAnalytics(app);\r\n}\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction initializeAnalytics(app, options = {}) {\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        const existingInstance = analyticsProvider.getImmediate();\r\n        if (deepEqual(options, analyticsProvider.getOptions())) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const analyticsInstance = analyticsProvider.initialize({ options });\r\n    return analyticsInstance;\r\n}\r\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\r\nasync function isSupported() {\r\n    if (isBrowserExtension()) {\r\n        return false;\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        return false;\r\n    }\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\r\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nasync function getGoogleAnalyticsClientId(analyticsInstance) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\r\n}\r\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\r\nfunction setUserId(analyticsInstance, id, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\r\nfunction setUserProperties(analyticsInstance, properties, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\r\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\r\nfunction setDefaultEventParameters(customParams) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\r\n    }\r\n    else {\r\n        _setDefaultEventParametersForInit(customParams);\r\n    }\r\n}\r\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\r\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction setConsent(consentSettings) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\r\n    }\r\n    else {\r\n        _setConsentDefaultForInit(consentSettings);\r\n    }\r\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction registerAnalytics() {\r\n    _registerComponent(new Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        return factory(app, installations, analyticsOptions);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function internalFactory(container) {\r\n        try {\r\n            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics();\n\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n"]},"metadata":{},"sourceType":"module"}