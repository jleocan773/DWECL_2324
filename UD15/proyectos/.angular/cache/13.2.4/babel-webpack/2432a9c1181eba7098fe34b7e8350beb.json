{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\xampp\\\\htdocs\\\\DWECL-Tema15\\\\proyecto\\\\aplicacion\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\n\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  constructor(code, message, status_ = 0) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    this.status_ = status_;\n    /**\r\n     * Stores custom error data unique to the `StorageError`.\r\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status() {\n    return this.status_;\n  }\n\n  set status(status) {\n    this.status_ = status;\n  }\n  /**\r\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\n\n\nvar StorageErrorCode;\n\n(function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\"; // JS specific\n\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(_appDelete = false) {}\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\n\n\nfunction start(doRequest, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback(...args) {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success, ...args) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\n\n\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n  408, // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1(...args) {\n  const BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args) {\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* InternalTaskState.RUNNING */\n    :\n    case \"pausing\"\n    /* InternalTaskState.PAUSING */\n    :\n    case \"canceling\"\n    /* InternalTaskState.CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* InternalTaskState.PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* InternalTaskState.SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* InternalTaskState.CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* InternalTaskState.ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return (...argsToForward) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n\n    return this.xhr_.response;\n  }\n\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n\n}\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n\n}\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n\n}\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob, metadata = null) {\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* InternalTaskState.RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n\n        this._error = error;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  isExponentialBackoffExpired() {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* InternalTaskState.RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case \"running\"\n        /* InternalTaskState.RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* InternalTaskState.CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* InternalTaskState.CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* InternalTaskState.PAUSING */\n        :\n          this._transition(\"paused\"\n          /* InternalTaskState.PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken,\n      /*retry=*/\n      false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* InternalTaskState.SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* InternalTaskState.SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* InternalTaskState.SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* InternalTaskState.CANCELING */\n      :\n      case \"pausing\"\n      /* InternalTaskState.PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n\n        break;\n\n      case \"running\"\n      /* InternalTaskState.RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* InternalTaskState.PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* InternalTaskState.PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* InternalTaskState.CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* InternalTaskState.ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* InternalTaskState.SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* InternalTaskState.PAUSING */\n      :\n        this._transition(\"paused\"\n        /* InternalTaskState.PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* InternalTaskState.CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* InternalTaskState.CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* InternalTaskState.RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* InternalTaskState.PAUSED */\n    || this._state === \"pausing\"\n    /* InternalTaskState.PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* InternalTaskState.RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* InternalTaskState.RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* InternalTaskState.PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* InternalTaskState.RUNNING */\n    || this._state === \"pausing\"\n    /* InternalTaskState.PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* InternalTaskState.CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(_x, _x2, _x3) {\n  return _listAllHelper.apply(this, arguments);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction _listAllHelper() {\n  _listAllHelper = _asyncToGenerator(function* (ref, accumulator, pageToken) {\n    const opt = {\n      // maxResults is 1000 by default.\n      pageToken\n    };\n    const nextPage = yield list$1(ref, opt);\n    accumulator.prefixes.push(...nextPage.prefixes);\n    accumulator.items.push(...nextPage.items);\n\n    if (nextPage.nextPageToken != null) {\n      yield listAllHelper(ref, accumulator, nextPage.nextPageToken);\n    }\n  });\n  return _listAllHelper.apply(this, arguments);\n}\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  _getAuthToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._overrideAuthToken) {\n        return _this._overrideAuthToken;\n      }\n\n      const auth = _this._authProvider.getImmediate({\n        optional: true\n      });\n\n      if (auth) {\n        const tokenData = yield auth.getToken();\n\n        if (tokenData !== null) {\n          return tokenData.accessToken;\n        }\n      }\n\n      return null;\n    })();\n  }\n\n  _getAppCheckToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const appCheck = _this2._appCheckProvider.getImmediate({\n        optional: true\n      });\n\n      if (appCheck) {\n        const result = yield appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n        // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n        // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n        // the token (actual or dummy) to send requests.\n\n        return result.token;\n      }\n\n      return null;\n    })();\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  makeRequestWithTokens(requestInfo, requestFactory) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const [authToken, appCheckToken] = yield Promise.all([_this3._getAuthToken(), _this3._getAppCheckToken()]);\n      return _this3._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n    })();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage(app = getApp(), bucketUrl) {\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port, options = {}) {\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, {\n  instanceIdentifier: url\n}) {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["C:/xampp/htdocs/DWECL-Tema15/proyecto/aplicacion/node_modules/@firebase/storage/dist/index.esm2017.js"],"names":["_getProvider","getApp","_registerComponent","registerVersion","SDK_VERSION","FirebaseError","isNode","createMockUserToken","getModularInstance","getDefaultEmulatorHostnameAndPort","Component","DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","constructor","code","message","status_","prependCode","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob$1","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata$2","maxOperationRetryTime","list$2","delimiter","pageToken","maxResults","getBytes$1","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata$2","deleteObject$2","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes$1","finalMetadata","uploadBytesResumable$1","uploadString$1","listAll$1","accumulator","listAllHelper","opt","nextPage","list$1","options","op","getMetadata$1","updateMetadata$1","getDownloadURL$1","deleteObject$1","_getChild$1","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","ref$1","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator$1","port","mockUserToken","_overrideAuthToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","getBytes","uploadBytes","uploadString","uploadBytesResumable","getMetadata","updateMetadata","list","listAll","getDownloadURL","deleteObject","_getChild","getStorage","bucketUrl","storageProvider","storageInstance","identifier","emulator","connectStorageEmulator","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","registerStorage","setMultipleInstances","_FbsBlob","_Location","_TaskEvent","_TaskState","_UploadTask","_dataFromString","_invalidArgument","_invalidRootOperation"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiT,WAAT,CAAqBtJ,GAArB,EAA0B;AACtBA,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAOkG,aAAa,CAAClG,GAAD,CAApB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuJ,cAAT,CAAwBvJ,GAAxB,EAA6B3J,QAA7B,EAAuC;AACnC2J,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAOmG,gBAAgB,CAACnG,GAAD,EAAM3J,QAAN,CAAvB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmT,IAAT,CAAcxJ,GAAd,EAAmBgG,OAAnB,EAA4B;AACxBhG,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAO+F,MAAM,CAAC/F,GAAD,EAAMgG,OAAN,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyD,OAAT,CAAiBzJ,GAAjB,EAAsB;AAClBA,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAO0F,SAAS,CAAC1F,GAAD,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0J,cAAT,CAAwB1J,GAAxB,EAA6B;AACzBA,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAOoG,gBAAgB,CAACpG,GAAD,CAAvB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2J,YAAT,CAAsB3J,GAAtB,EAA2B;AACvBA,EAAAA,GAAG,GAAGjgB,kBAAkB,CAACigB,GAAD,CAAxB;AACA,SAAOqG,cAAc,CAACrG,GAAD,CAArB;AACH;;AACD,SAASA,GAAT,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","sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"]},"metadata":{},"sourceType":"module"}